import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { Router, RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';
import * as globals from '../../globals';
import { Component, ElementRef, PLATFORM_ID, Inject, QueryList, ViewChildren, signal, ChangeDetectorRef, } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { Chart, ChartConfiguration, registerables } from 'chart.js';
import { FormsModule } from '@angular/forms';
import { ArcElement, Tooltip, Legend } from 'chart.js';
import { SegmentComponent } from 'app/components/segment/segment.component';
import ChartDataLabels from 'chartjs-plugin-datalabels';
import { ApiGateWayService } from 'app/services/apiGateway.service';
import { GlobalProviderService } from 'app/services/global-provider.service';

Chart.register(ArcElement, Tooltip, Legend);
Chart.register(...registerables, ChartDataLabels);

@Component({
  selector: 'app-dashboard',
  imports: [CommonModule, RouterModule, FormsModule, SegmentComponent],
  templateUrl: './dashboard.component.html',
  styleUrl: './dashboard.component.scss',
})
export class DashboardComponent {
  @ViewChildren('customerChartCanvas') chartCanvases!: QueryList<ElementRef>;
  chart!: Chart;
  showProductSection: boolean = false;
  overviewCards: {
    title: string;
    count: number;
    growth: number;
    icon: SafeHtml;
    bgColor: string;
    route?: string;
  }[] = [];
  segbuttonConfig: any = [
    { name: 'Daily Reports', functionName: 'daily-reports' },
    { name: 'Platform Statistics', functionName: 'platform-statistics' },
  ];
  currentTab: string = 'daily-reports';
  selectedDate = 'Today';

  now = new Date();

  fromDate: any = this.now.getFullYear() + '-' +
    String(this.now.getMonth() + 1).padStart(2, '0') + '-' +
    String(this.now.getDate()).padStart(2, '0');

  toDate: any = this.now.getFullYear() + '-' +
    String(this.now.getMonth() + 1).padStart(2, '0') + '-' +
    String(this.now.getDate()).padStart(2, '0');

  // fromDate: any;
  // toDate: any;
  displayChart: boolean = false;
  statsPerChart: any = [
    [
      { label: 'Total Number of Active Customers', count: 11, color: '#a8a113ff' },
      { label: 'Passbook', count: 24, color: '#0da92cff' },
      { label: 'NCAO', count: 26, color: '#a488bcff' },
      // { label: 'Both Customer', count: 39, color: '#8d0f99ff' }
    ],
    [
      { label: 'App & Online Customer', count: 11, color: '#ca3a27ff' },
      { label: 'App Customer', count: 24, color: '#bb1b68ff' },
      { label: 'Online Customer', count: 26, color: '#686a6cff' },
      // { label: 'Reg & NCAO Count', count: 39, color: '#1bb4e7ff' },
      // { label: 'Total Count', count: 39, color: '#066c30ff' },
    ],
    [
      { label: 'Unfinished Customer', count: 11, color: '#2f3cfe' },
      { label: 'Failed Smartsearch', count: 24, color: '#e6caff' },
      { label: 'Customer with Multiple Application', count: 26, color: '#9a27ec' },
      // { label: 'Failed', count: 39, color: '#6b99f0ff' }
    ]
  ]

  statsPerChartPS: any[] = [];
  hasZero: boolean[] = [false, false, false];
  charts: any[] = [null, null, null];
  showtable: boolean[] = [false, false, false];

  constructor(
    @Inject(PLATFORM_ID) private platformId: Object,
    private sanitizer: DomSanitizer,
    private apiGatewayService: ApiGateWayService,
    private gps: GlobalProviderService,
    private cd: ChangeDetectorRef,
    private router: Router
  ) {
    this.initializeOverviewCards();
    this.getDashboardDetails();
    const searchData = {
      fromdate: this.fromDate,
      todate: this.toDate,
      users_id: this.gps.usersID
    };

    this.apiGatewayService.post(globals.dashboardDateSearchDetailApiEndPoint, searchData).subscribe({
      next: (res) => {
        try {
          let temp: any = [];
          for (const key in res.data) {
            temp.push(Object.values(res.data[key][0])[0]);
          }
          let checkZero = [false, false, false];
          this.updateAllCharts(temp, 0, [12, 8, 9], checkZero);
            this.updateStats(temp, 0, [12, 8, 9]);
            this.updateAllCharts(temp, 1, [7, 6, 5], checkZero);
            this.updateStats(temp, 1, [7, 6, 5]);
            this.updateAllCharts(temp, 2, [2, 3, 4], checkZero);
            this.updateStats(temp, 2, [2, 3, 4]);
          this.cd.detectChanges();
          console.log("(DR)", checkZero);

          this.hasZero = checkZero;
        } catch (error) {
          console.error('Error processing dashboard response:', error);
        }
      },
      error: (err) => {
        console.error('Dashboard search failed:', err);
      }
    });
  }
goToRoute(card: any) {
  if (card.route) {
    this.router.navigate([card.route]);
  }
}
  initializeOverviewCards(): void {
    try {
      this.overviewCards = [
        {
          title: 'Total Customers',
          count: 0,
          growth: 14.4,
          icon: this.sanitizer.bypassSecurityTrustHtml(`
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="10" viewBox="0 0 18 10" fill="none">
     <circle cx="9" cy="2" r="1.5" stroke="white" stroke-linecap="round"/>
     <path d="M12.701 1.25C12.8999 0.905474 13.2275 0.654076 13.6118 0.551111C13.996 0.448147 14.4055 0.50205 14.75 0.700962C15.0945 0.899874 15.3459 1.2275 15.4489 1.61177C15.5519 1.99604 15.498 2.40547 15.299 2.75C15.1001 3.09453 14.7725 3.34592 14.3882 3.44889C14.004 3.55185 13.5945 3.49795 13.25 3.29904C12.9055 3.10013 12.6541 2.7725 12.5511 2.38823C12.4481 2.00396 12.502 1.59453 12.701 1.25L12.701 1.25Z" stroke="white"/>
     <path d="M2.70096 1.25C2.89987 0.905474 3.2275 0.654076 3.61177 0.551111C3.99604 0.448147 4.40547 0.50205 4.75 0.700962C5.09453 0.899874 5.34592 1.2275 5.44889 1.61177C5.55185 1.99604 5.49795 2.40547 5.29904 2.75C5.10013 3.09453 4.7725 3.34592 4.38823 3.44889C4.00396 3.55185 3.59453 3.49795 3.25 3.29904C2.90547 3.10013 2.65408 2.7725 2.55111 2.38823C2.44815 2.00396 2.50205 1.59453 2.70096 1.25L2.70096 1.25Z" stroke="white"/>
     <path d="M13.5004 5.5L13.5004 5H13.5004V5.5ZM17.3637 8.5127L17.85 8.39639L17.8499 8.39616L17.3637 8.5127ZM16.5004 9.5L16.5004 10L16.5006 10L16.5004 9.5ZM11.5004 9.5L11.5002 9L11.5004 10V9.5ZM12.3803 8.50977L12.8696 8.40696L12.8696 8.40692L12.3803 8.50977ZM11.1 6.18555L10.8093 5.77871L10.277 6.15905L10.7838 6.57284L11.1 6.18555ZM13.5004 5.5L13.5004 6C14.7262 6.00008 15.4896 6.40891 15.9821 6.91204C16.4882 7.42899 16.7473 8.08631 16.8774 8.62923L17.3637 8.5127L17.8499 8.39616C17.6961 7.75465 17.3754 6.90571 16.6967 6.21247C16.0045 5.5054 14.9781 5.0001 13.5004 5L13.5004 5.5ZM17.3637 8.5127L16.8774 8.629C16.9009 8.72736 16.8754 8.80702 16.8167 8.87176C16.7527 8.94241 16.6413 8.99994 16.5002 9L16.5004 9.5L16.5006 10C17.3 9.99966 18.0702 9.31707 17.85 8.39639L17.3637 8.5127ZM16.5004 9.5V9H11.5004V9.5V10H16.5004V9.5ZM11.5004 9.5L11.5006 10C12.3043 9.99969 13.0613 9.31922 12.8696 8.40696L12.3803 8.50977L11.891 8.61257C11.9126 8.71559 11.8842 8.80106 11.8215 8.86938C11.7543 8.94265 11.6411 8.99995 11.5002 9L11.5004 9.5ZM12.3803 8.50977L12.8696 8.40692C12.7084 7.6399 12.3299 6.54429 11.4162 5.79826L11.1 6.18555L10.7838 6.57284C11.4368 7.10604 11.7483 7.93366 11.891 8.61261L12.3803 8.50977ZM11.1 6.18555L11.3907 6.59238C11.8686 6.25094 12.5404 6 13.5004 6V5.5V5C12.3547 5 11.4745 5.30347 10.8093 5.77871L11.1 6.18555Z" fill="white"/>
     <path d="M4.50025 5.5L4.50027 5H4.50025V5.5ZM6.89966 6.18652L7.21601 6.57372L7.72245 6.15995L7.19037 5.77972L6.89966 6.18652ZM5.61939 8.50977L5.13008 8.40692L5.13006 8.40699L5.61939 8.50977ZM0.635988 8.5127L0.149759 8.39615L0.149693 8.39643L0.635988 8.5127ZM4.50025 5.5L4.50022 6C5.45976 6.00004 6.13074 6.25159 6.60895 6.59333L6.89966 6.18652L7.19037 5.77972C6.52556 5.30464 5.64641 5.00005 4.50027 5L4.50025 5.5ZM6.89966 6.18652L6.58331 5.79932C5.67038 6.5452 5.29133 7.63973 5.13008 8.40692L5.61939 8.50977L6.10869 8.61261C6.25128 7.93422 6.56318 7.10709 7.21601 6.57372L6.89966 6.18652ZM5.61939 8.50977L5.13006 8.40699C4.93834 9.31983 5.69678 10 6.50025 10V9.5V9C6.35923 9 6.24581 8.94269 6.17836 8.86927C6.11548 8.80082 6.08712 8.71535 6.10871 8.61254L5.61939 8.50977ZM6.50025 9.5V9H1.50025V9.5V10H6.50025V9.5ZM1.50025 9.5V9C1.35902 9 1.24744 8.94245 1.1832 8.87166C1.12432 8.80678 1.09881 8.72712 1.12228 8.62896L0.635988 8.5127L0.149693 8.39643C-0.0705652 9.31769 0.701045 10 1.50025 10V9.5ZM0.635988 8.5127L1.12222 8.62924C1.25234 8.08636 1.51157 7.42899 2.01787 6.912C2.51063 6.40883 3.27425 6 4.50025 6V5.5V5C3.02239 5 1.99583 5.50527 1.30341 6.21233C0.624511 6.90556 0.303545 7.75454 0.149759 8.39615L0.635988 8.5127Z" fill="white"/>
     <path d="M9 5.5C11.3642 5.5 12.1314 7.32511 12.3804 8.50967C12.494 9.05014 12.0523 9.5 11.5 9.5H6.5C5.94772 9.5 5.50601 9.05014 5.61961 8.50967C5.86859 7.32511 6.63581 5.5 9 5.5Z" stroke="white" stroke-linecap="round"/>
   </svg>
           `),
          bgColor: '#dbeafe',
          route: '/customer-management'
        },
        {
          title: 'App Customers',
          count: 0,
          growth: 14.4,
          icon: this.sanitizer.bypassSecurityTrustHtml(`
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
     <circle cx="12" cy="8" r="2.5" stroke="white" stroke-linecap="round"/>
     <path d="M13.7679 6.5C13.9657 6.15743 14.2607 5.88121 14.6154 5.70625C14.9702 5.5313 15.3689 5.46548 15.7611 5.51711C16.1532 5.56874 16.5213 5.73551 16.8187 5.99632C17.1161 6.25713 17.3295 6.60028 17.4319 6.98236C17.5342 7.36445 17.521 7.76831 17.3939 8.14288C17.2667 8.51745 17.0313 8.8459 16.7175 9.08671C16.4037 9.32751 16.0255 9.46985 15.6308 9.49572C15.2361 9.52159 14.8426 9.42983 14.5 9.23205" stroke="white"/>
     <path d="M10.2321 6.5C10.0343 6.15743 9.73935 5.88121 9.38458 5.70625C9.02981 5.5313 8.63113 5.46548 8.23895 5.51711C7.84677 5.56874 7.47871 5.73551 7.18131 5.99632C6.88391 6.25713 6.67053 6.60028 6.56815 6.98236C6.46577 7.36445 6.47899 7.76831 6.60614 8.14288C6.73329 8.51745 6.96866 8.8459 7.28248 9.08671C7.5963 9.32751 7.97448 9.46985 8.36919 9.49572C8.76391 9.52159 9.15743 9.42983 9.5 9.23205" stroke="white"/>
     <path d="M12 12.5C16.0802 12.5 17.1335 15.8022 17.4054 17.507C17.4924 18.0524 17.0523 18.5 16.5 18.5H7.5C6.94771 18.5 6.50763 18.0524 6.59461 17.507C6.86649 15.8022 7.91976 12.5 12 12.5Z" stroke="white" stroke-linecap="round"/>
     <path d="M15.5002 11.5L15.5002 11H15.5002V11.5ZM19.2961 15.416L19.7811 15.2946L19.7811 15.2945L19.2961 15.416ZM17.1799 16.5L16.6996 16.639L16.804 17H17.1799V16.5ZM13.0871 12.5859L12.7179 12.2488L12.0974 12.9283L13.0051 13.0792L13.0871 12.5859ZM15.5002 11.5L15.5002 12C16.5277 12 17.2493 12.5026 17.778 13.2068C18.3173 13.9251 18.6339 14.8303 18.8111 15.5375L19.2961 15.416L19.7811 15.2945C19.5899 14.5313 19.2325 13.4785 18.5777 12.6065C17.9124 11.7203 16.9202 11.0001 15.5002 11L15.5002 11.5ZM19.2961 15.416L18.8111 15.5375C18.8649 15.7526 18.7069 16 18.3947 16V16.5V17C19.2658 17 20.0147 16.2272 19.7811 15.2946L19.2961 15.416ZM18.3947 16.5V16H17.1799V16.5V17H18.3947V16.5ZM17.1799 16.5L17.6602 16.361C17.189 14.7329 16.0189 12.5663 13.1691 12.0927L13.0871 12.5859L13.0051 13.0792C15.3052 13.4614 16.2774 15.1799 16.6996 16.639L17.1799 16.5ZM13.0871 12.5859L13.4563 12.9231C13.9567 12.3751 14.6108 12 15.5002 12V11.5V11C14.283 11 13.3736 11.5306 12.7179 12.2488L13.0871 12.5859Z" fill="white"/>
     <path d="M8.4999 11.5L8.4999 11L8.49989 11L8.4999 11.5ZM10.912 12.5859L10.9941 13.0792L11.9017 12.9282L11.2812 12.2488L10.912 12.5859ZM6.82022 16.5V17H7.19604L7.30051 16.639L6.82022 16.5ZM4.70303 15.416L4.21801 15.2945L4.21801 15.2946L4.70303 15.416ZM8.4999 11.5V12C9.38881 12 10.0423 12.3751 10.5428 12.9231L10.912 12.5859L11.2812 12.2488C10.6257 11.531 9.71708 11 8.4999 11V11.5ZM10.912 12.5859L10.83 12.0927C7.98077 12.5666 6.81097 14.7331 6.33992 16.361L6.82022 16.5L7.30051 16.639C7.72268 15.1801 8.69457 13.4617 10.9941 13.0792L10.912 12.5859ZM6.82022 16.5V16H5.60537V16.5V17H6.82022V16.5ZM5.60537 16.5V16C5.29237 16 5.13436 15.7519 5.18805 15.5375L4.70303 15.416L4.21801 15.2946C3.98426 16.2279 4.73513 17 5.60537 17V16.5ZM4.70303 15.416L5.18805 15.5375C5.36513 14.8304 5.68198 13.9252 6.22145 13.2069C6.75035 12.5027 7.47223 12 8.49992 12L8.4999 11.5L8.49989 11C7.07981 11 6.08737 11.7202 5.42184 12.6064C4.76688 13.4785 4.40917 14.5312 4.21801 15.2945L4.70303 15.416Z" fill="white"/>
   </svg>
           `),
          bgColor: '#d1fae5',
          route: '/customer-management'
        },
        {
          title: 'Online Customers',
          count: 0,
          growth: 14.4,
          icon: this.sanitizer.bypassSecurityTrustHtml(`
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="10" viewBox="0 0 18 10" fill="none">
     <circle cx="9" cy="2" r="1.5" stroke="white" stroke-linecap="round"/>
     <path d="M12.701 1.25C12.8999 0.905474 13.2275 0.654076 13.6118 0.551111C13.996 0.448147 14.4055 0.50205 14.75 0.700962C15.0945 0.899874 15.3459 1.2275 15.4489 1.61177C15.5519 1.99604 15.498 2.40547 15.299 2.75C15.1001 3.09453 14.7725 3.34592 14.3882 3.44889C14.004 3.55185 13.5945 3.49795 13.25 3.29904C12.9055 3.10013 12.6541 2.7725 12.5511 2.38823C12.4481 2.00396 12.502 1.59453 12.701 1.25L12.701 1.25Z" stroke="white"/>
     <path d="M2.70096 1.25C2.89987 0.905474 3.2275 0.654076 3.61177 0.551111C3.99604 0.448147 4.40547 0.50205 4.75 0.700962C5.09453 0.899874 5.34592 1.2275 5.44889 1.61177C5.55185 1.99604 5.49795 2.40547 5.29904 2.75C5.10013 3.09453 4.7725 3.34592 4.38823 3.44889C4.00396 3.55185 3.59453 3.49795 3.25 3.29904C2.90547 3.10013 2.65408 2.7725 2.55111 2.38823C2.44815 2.00396 2.50205 1.59453 2.70096 1.25L2.70096 1.25Z" stroke="white"/>
     <path d="M13.5004 5.5L13.5004 5H13.5004V5.5ZM17.3637 8.5127L17.85 8.39639L17.8499 8.39616L17.3637 8.5127ZM16.5004 9.5L16.5004 10L16.5006 10L16.5004 9.5ZM11.5004 9.5L11.5002 9L11.5004 10V9.5ZM12.3803 8.50977L12.8696 8.40696L12.8696 8.40692L12.3803 8.50977ZM11.1 6.18555L10.8093 5.77871L10.277 6.15905L10.7838 6.57284L11.1 6.18555ZM13.5004 5.5L13.5004 6C14.7262 6.00008 15.4896 6.40891 15.9821 6.91204C16.4882 7.42899 16.7473 8.08631 16.8774 8.62923L17.3637 8.5127L17.8499 8.39616C17.6961 7.75465 17.3754 6.90571 16.6967 6.21247C16.0045 5.5054 14.9781 5.0001 13.5004 5L13.5004 5.5ZM17.3637 8.5127L16.8774 8.629C16.9009 8.72736 16.8754 8.80702 16.8167 8.87176C16.7527 8.94241 16.6413 8.99994 16.5002 9L16.5004 9.5L16.5006 10C17.3 9.99966 18.0702 9.31707 17.85 8.39639L17.3637 8.5127ZM16.5004 9.5V9H11.5004V9.5V10H16.5004V9.5ZM11.5004 9.5L11.5006 10C12.3043 9.99969 13.0613 9.31922 12.8696 8.40696L12.3803 8.50977L11.891 8.61257C11.9126 8.71559 11.8842 8.80106 11.8215 8.86938C11.7543 8.94265 11.6411 8.99995 11.5002 9L11.5004 9.5ZM12.3803 8.50977L12.8696 8.40692C12.7084 7.6399 12.3299 6.54429 11.4162 5.79826L11.1 6.18555L10.7838 6.57284C11.4368 7.10604 11.7483 7.93366 11.891 8.61261L12.3803 8.50977ZM11.1 6.18555L11.3907 6.59238C11.8686 6.25094 12.5404 6 13.5004 6V5.5V5C12.3547 5 11.4745 5.30347 10.8093 5.77871L11.1 6.18555Z" fill="white"/>
     <path d="M4.50025 5.5L4.50027 5H4.50025V5.5ZM6.89966 6.18652L7.21601 6.57372L7.72245 6.15995L7.19037 5.77972L6.89966 6.18652ZM5.61939 8.50977L5.13008 8.40692L5.13006 8.40699L5.61939 8.50977ZM0.635988 8.5127L0.149759 8.39615L0.149693 8.39643L0.635988 8.5127ZM4.50025 5.5L4.50022 6C5.45976 6.00004 6.13074 6.25159 6.60895 6.59333L6.89966 6.18652L7.19037 5.77972C6.52556 5.30464 5.64641 5.00005 4.50027 5L4.50025 5.5ZM6.89966 6.18652L6.58331 5.79932C5.67038 6.5452 5.29133 7.63973 5.13008 8.40692L5.61939 8.50977L6.10869 8.61261C6.25128 7.93422 6.56318 7.10709 7.21601 6.57372L6.89966 6.18652ZM5.61939 8.50977L5.13006 8.40699C4.93834 9.31983 5.69678 10 6.50025 10V9.5V9C6.35923 9 6.24581 8.94269 6.17836 8.86927C6.11548 8.80082 6.08712 8.71535 6.10871 8.61254L5.61939 8.50977ZM6.50025 9.5V9H1.50025V9.5V10H6.50025V9.5ZM1.50025 9.5V9C1.35902 9 1.24744 8.94245 1.1832 8.87166C1.12432 8.80678 1.09881 8.72712 1.12228 8.62896L0.635988 8.5127L0.149693 8.39643C-0.0705652 9.31769 0.701045 10 1.50025 10V9.5ZM0.635988 8.5127L1.12222 8.62924C1.25234 8.08636 1.51157 7.42899 2.01787 6.912C2.51063 6.40883 3.27425 6 4.50025 6V5.5V5C3.02239 5 1.99583 5.50527 1.30341 6.21233C0.624511 6.90556 0.303545 7.75454 0.149759 8.39615L0.635988 8.5127Z" fill="white"/>
     <path d="M9 5.5C11.3642 5.5 12.1314 7.32511 12.3804 8.50967C12.494 9.05014 12.0523 9.5 11.5 9.5H6.5C5.94772 9.5 5.50601 9.05014 5.61961 8.50967C5.86859 7.32511 6.63581 5.5 9 5.5Z" stroke="white" stroke-linecap="round"/>
   </svg>
           `),
          bgColor: '#fde2e4',
          route: '/customer-management'
        },
        {
          title: 'App & Online Customers',
          count: 0,
          growth: 14.4,
          icon: this.sanitizer.bypassSecurityTrustHtml(`
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="10" viewBox="0 0 18 10" fill="none">
     <circle cx="9" cy="2" r="1.5" stroke="white" stroke-linecap="round"/>
     <path d="M12.701 1.25C12.8999 0.905474 13.2275 0.654076 13.6118 0.551111C13.996 0.448147 14.4055 0.50205 14.75 0.700962C15.0945 0.899874 15.3459 1.2275 15.4489 1.61177C15.5519 1.99604 15.498 2.40547 15.299 2.75C15.1001 3.09453 14.7725 3.34592 14.3882 3.44889C14.004 3.55185 13.5945 3.49795 13.25 3.29904C12.9055 3.10013 12.6541 2.7725 12.5511 2.38823C12.4481 2.00396 12.502 1.59453 12.701 1.25L12.701 1.25Z" stroke="white"/>
     <path d="M2.70096 1.25C2.89987 0.905474 3.2275 0.654076 3.61177 0.551111C3.99604 0.448147 4.40547 0.50205 4.75 0.700962C5.09453 0.899874 5.34592 1.2275 5.44889 1.61177C5.55185 1.99604 5.49795 2.40547 5.29904 2.75C5.10013 3.09453 4.7725 3.34592 4.38823 3.44889C4.00396 3.55185 3.59453 3.49795 3.25 3.29904C2.90547 3.10013 2.65408 2.7725 2.55111 2.38823C2.44815 2.00396 2.50205 1.59453 2.70096 1.25L2.70096 1.25Z" stroke="white"/>
     <path d="M13.5004 5.5L13.5004 5H13.5004V5.5ZM17.3637 8.5127L17.85 8.39639L17.8499 8.39616L17.3637 8.5127ZM16.5004 9.5L16.5004 10L16.5006 10L16.5004 9.5ZM11.5004 9.5L11.5002 9L11.5004 10V9.5ZM12.3803 8.50977L12.8696 8.40696L12.8696 8.40692L12.3803 8.50977ZM11.1 6.18555L10.8093 5.77871L10.277 6.15905L10.7838 6.57284L11.1 6.18555ZM13.5004 5.5L13.5004 6C14.7262 6.00008 15.4896 6.40891 15.9821 6.91204C16.4882 7.42899 16.7473 8.08631 16.8774 8.62923L17.3637 8.5127L17.8499 8.39616C17.6961 7.75465 17.3754 6.90571 16.6967 6.21247C16.0045 5.5054 14.9781 5.0001 13.5004 5L13.5004 5.5ZM17.3637 8.5127L16.8774 8.629C16.9009 8.72736 16.8754 8.80702 16.8167 8.87176C16.7527 8.94241 16.6413 8.99994 16.5002 9L16.5004 9.5L16.5006 10C17.3 9.99966 18.0702 9.31707 17.85 8.39639L17.3637 8.5127ZM16.5004 9.5V9H11.5004V9.5V10H16.5004V9.5ZM11.5004 9.5L11.5006 10C12.3043 9.99969 13.0613 9.31922 12.8696 8.40696L12.3803 8.50977L11.891 8.61257C11.9126 8.71559 11.8842 8.80106 11.8215 8.86938C11.7543 8.94265 11.6411 8.99995 11.5002 9L11.5004 9.5ZM12.3803 8.50977L12.8696 8.40692C12.7084 7.6399 12.3299 6.54429 11.4162 5.79826L11.1 6.18555L10.7838 6.57284C11.4368 7.10604 11.7483 7.93366 11.891 8.61261L12.3803 8.50977ZM11.1 6.18555L11.3907 6.59238C11.8686 6.25094 12.5404 6 13.5004 6V5.5V5C12.3547 5 11.4745 5.30347 10.8093 5.77871L11.1 6.18555Z" fill="white"/>
     <path d="M4.50025 5.5L4.50027 5H4.50025V5.5ZM6.89966 6.18652L7.21601 6.57372L7.72245 6.15995L7.19037 5.77972L6.89966 6.18652ZM5.61939 8.50977L5.13008 8.40692L5.13006 8.40699L5.61939 8.50977ZM0.635988 8.5127L0.149759 8.39615L0.149693 8.39643L0.635988 8.5127ZM4.50025 5.5L4.50022 6C5.45976 6.00004 6.13074 6.25159 6.60895 6.59333L6.89966 6.18652L7.19037 5.77972C6.52556 5.30464 5.64641 5.00005 4.50027 5L4.50025 5.5ZM6.89966 6.18652L6.58331 5.79932C5.67038 6.5452 5.29133 7.63973 5.13008 8.40692L5.61939 8.50977L6.10869 8.61261C6.25128 7.93422 6.56318 7.10709 7.21601 6.57372L6.89966 6.18652ZM5.61939 8.50977L5.13006 8.40699C4.93834 9.31983 5.69678 10 6.50025 10V9.5V9C6.35923 9 6.24581 8.94269 6.17836 8.86927C6.11548 8.80082 6.08712 8.71535 6.10871 8.61254L5.61939 8.50977ZM6.50025 9.5V9H1.50025V9.5V10H6.50025V9.5ZM1.50025 9.5V9C1.35902 9 1.24744 8.94245 1.1832 8.87166C1.12432 8.80678 1.09881 8.72712 1.12228 8.62896L0.635988 8.5127L0.149693 8.39643C-0.0705652 9.31769 0.701045 10 1.50025 10V9.5ZM0.635988 8.5127L1.12222 8.62924C1.25234 8.08636 1.51157 7.42899 2.01787 6.912C2.51063 6.40883 3.27425 6 4.50025 6V5.5V5C3.02239 5 1.99583 5.50527 1.30341 6.21233C0.624511 6.90556 0.303545 7.75454 0.149759 8.39615L0.635988 8.5127Z" fill="white"/>
     <path d="M9 5.5C11.3642 5.5 12.1314 7.32511 12.3804 8.50967C12.494 9.05014 12.0523 9.5 11.5 9.5H6.5C5.94772 9.5 5.50601 9.05014 5.61961 8.50967C5.86859 7.32511 6.63581 5.5 9 5.5Z" stroke="white" stroke-linecap="round"/>
   </svg>
           `),
          bgColor: '#fef9c3',
          route: '/customer-management'
        },
        {
          title: 'Staff Users',
          count: 0,
          growth: 14.4,
          icon: this.sanitizer.bypassSecurityTrustHtml(`
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="10" viewBox="0 0 18 10" fill="none">
     <circle cx="9" cy="2" r="1.5" stroke="white" stroke-linecap="round"/>
     <path d="M12.701 1.25C12.8999 0.905474 13.2275 0.654076 13.6118 0.551111C13.996 0.448147 14.4055 0.50205 14.75 0.700962C15.0945 0.899874 15.3459 1.2275 15.4489 1.61177C15.5519 1.99604 15.498 2.40547 15.299 2.75C15.1001 3.09453 14.7725 3.34592 14.3882 3.44889C14.004 3.55185 13.5945 3.49795 13.25 3.29904C12.9055 3.10013 12.6541 2.7725 12.5511 2.38823C12.4481 2.00396 12.502 1.59453 12.701 1.25L12.701 1.25Z" stroke="white"/>
     <path d="M2.70096 1.25C2.89987 0.905474 3.2275 0.654076 3.61177 0.551111C3.99604 0.448147 4.40547 0.50205 4.75 0.700962C5.09453 0.899874 5.34592 1.2275 5.44889 1.61177C5.55185 1.99604 5.49795 2.40547 5.29904 2.75C5.10013 3.09453 4.7725 3.34592 4.38823 3.44889C4.00396 3.55185 3.59453 3.49795 3.25 3.29904C2.90547 3.10013 2.65408 2.7725 2.55111 2.38823C2.44815 2.00396 2.50205 1.59453 2.70096 1.25L2.70096 1.25Z" stroke="white"/>
     <path d="M13.5004 5.5L13.5004 5H13.5004V5.5ZM17.3637 8.5127L17.85 8.39639L17.8499 8.39616L17.3637 8.5127ZM16.5004 9.5L16.5004 10L16.5006 10L16.5004 9.5ZM11.5004 9.5L11.5002 9L11.5004 10V9.5ZM12.3803 8.50977L12.8696 8.40696L12.8696 8.40692L12.3803 8.50977ZM11.1 6.18555L10.8093 5.77871L10.277 6.15905L10.7838 6.57284L11.1 6.18555ZM13.5004 5.5L13.5004 6C14.7262 6.00008 15.4896 6.40891 15.9821 6.91204C16.4882 7.42899 16.7473 8.08631 16.8774 8.62923L17.3637 8.5127L17.8499 8.39616C17.6961 7.75465 17.3754 6.90571 16.6967 6.21247C16.0045 5.5054 14.9781 5.0001 13.5004 5L13.5004 5.5ZM17.3637 8.5127L16.8774 8.629C16.9009 8.72736 16.8754 8.80702 16.8167 8.87176C16.7527 8.94241 16.6413 8.99994 16.5002 9L16.5004 9.5L16.5006 10C17.3 9.99966 18.0702 9.31707 17.85 8.39639L17.3637 8.5127ZM16.5004 9.5V9H11.5004V9.5V10H16.5004V9.5ZM11.5004 9.5L11.5006 10C12.3043 9.99969 13.0613 9.31922 12.8696 8.40696L12.3803 8.50977L11.891 8.61257C11.9126 8.71559 11.8842 8.80106 11.8215 8.86938C11.7543 8.94265 11.6411 8.99995 11.5002 9L11.5004 9.5ZM12.3803 8.50977L12.8696 8.40692C12.7084 7.6399 12.3299 6.54429 11.4162 5.79826L11.1 6.18555L10.7838 6.57284C11.4368 7.10604 11.7483 7.93366 11.891 8.61261L12.3803 8.50977ZM11.1 6.18555L11.3907 6.59238C11.8686 6.25094 12.5404 6 13.5004 6V5.5V5C12.3547 5 11.4745 5.30347 10.8093 5.77871L11.1 6.18555Z" fill="white"/>
     <path d="M4.50025 5.5L4.50027 5H4.50025V5.5ZM6.89966 6.18652L7.21601 6.57372L7.72245 6.15995L7.19037 5.77972L6.89966 6.18652ZM5.61939 8.50977L5.13008 8.40692L5.13006 8.40699L5.61939 8.50977ZM0.635988 8.5127L0.149759 8.39615L0.149693 8.39643L0.635988 8.5127ZM4.50025 5.5L4.50022 6C5.45976 6.00004 6.13074 6.25159 6.60895 6.59333L6.89966 6.18652L7.19037 5.77972C6.52556 5.30464 5.64641 5.00005 4.50027 5L4.50025 5.5ZM6.89966 6.18652L6.58331 5.79932C5.67038 6.5452 5.29133 7.63973 5.13008 8.40692L5.61939 8.50977L6.10869 8.61261C6.25128 7.93422 6.56318 7.10709 7.21601 6.57372L6.89966 6.18652ZM5.61939 8.50977L5.13006 8.40699C4.93834 9.31983 5.69678 10 6.50025 10V9.5V9C6.35923 9 6.24581 8.94269 6.17836 8.86927C6.11548 8.80082 6.08712 8.71535 6.10871 8.61254L5.61939 8.50977ZM6.50025 9.5V9H1.50025V9.5V10H6.50025V9.5ZM1.50025 9.5V9C1.35902 9 1.24744 8.94245 1.1832 8.87166C1.12432 8.80678 1.09881 8.72712 1.12228 8.62896L0.635988 8.5127L0.149693 8.39643C-0.0705652 9.31769 0.701045 10 1.50025 10V9.5ZM0.635988 8.5127L1.12222 8.62924C1.25234 8.08636 1.51157 7.42899 2.01787 6.912C2.51063 6.40883 3.27425 6 4.50025 6V5.5V5C3.02239 5 1.99583 5.50527 1.30341 6.21233C0.624511 6.90556 0.303545 7.75454 0.149759 8.39615L0.635988 8.5127Z" fill="white"/>
     <path d="M9 5.5C11.3642 5.5 12.1314 7.32511 12.3804 8.50967C12.494 9.05014 12.0523 9.5 11.5 9.5H6.5C5.94772 9.5 5.50601 9.05014 5.61961 8.50967C5.86859 7.32511 6.63581 5.5 9 5.5Z" stroke="white" stroke-linecap="round"/>
   </svg>
           `),
          bgColor: '#d1fae5',
          route: '/users'
        },
        {
          title: 'Products',
          count: 0,
          growth: 14.4,
          icon: this.sanitizer.bypassSecurityTrustHtml(`
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="10" viewBox="0 0 18 10" fill="none">
     <circle cx="9" cy="2" r="1.5" stroke="white" stroke-linecap="round"/>
     <path d="M12.701 1.25C12.8999 0.905474 13.2275 0.654076 13.6118 0.551111C13.996 0.448147 14.4055 0.50205 14.75 0.700962C15.0945 0.899874 15.3459 1.2275 15.4489 1.61177C15.5519 1.99604 15.498 2.40547 15.299 2.75C15.1001 3.09453 14.7725 3.34592 14.3882 3.44889C14.004 3.55185 13.5945 3.49795 13.25 3.29904C12.9055 3.10013 12.6541 2.7725 12.5511 2.38823C12.4481 2.00396 12.502 1.59453 12.701 1.25L12.701 1.25Z" stroke="white"/>
     <path d="M2.70096 1.25C2.89987 0.905474 3.2275 0.654076 3.61177 0.551111C3.99604 0.448147 4.40547 0.50205 4.75 0.700962C5.09453 0.899874 5.34592 1.2275 5.44889 1.61177C5.55185 1.99604 5.49795 2.40547 5.29904 2.75C5.10013 3.09453 4.7725 3.34592 4.38823 3.44889C4.00396 3.55185 3.59453 3.49795 3.25 3.29904C2.90547 3.10013 2.65408 2.7725 2.55111 2.38823C2.44815 2.00396 2.50205 1.59453 2.70096 1.25L2.70096 1.25Z" stroke="white"/>
     <path d="M13.5004 5.5L13.5004 5H13.5004V5.5ZM17.3637 8.5127L17.85 8.39639L17.8499 8.39616L17.3637 8.5127ZM16.5004 9.5L16.5004 10L16.5006 10L16.5004 9.5ZM11.5004 9.5L11.5002 9L11.5004 10V9.5ZM12.3803 8.50977L12.8696 8.40696L12.8696 8.40692L12.3803 8.50977ZM11.1 6.18555L10.8093 5.77871L10.277 6.15905L10.7838 6.57284L11.1 6.18555ZM13.5004 5.5L13.5004 6C14.7262 6.00008 15.4896 6.40891 15.9821 6.91204C16.4882 7.42899 16.7473 8.08631 16.8774 8.62923L17.3637 8.5127L17.8499 8.39616C17.6961 7.75465 17.3754 6.90571 16.6967 6.21247C16.0045 5.5054 14.9781 5.0001 13.5004 5L13.5004 5.5ZM17.3637 8.5127L16.8774 8.629C16.9009 8.72736 16.8754 8.80702 16.8167 8.87176C16.7527 8.94241 16.6413 8.99994 16.5002 9L16.5004 9.5L16.5006 10C17.3 9.99966 18.0702 9.31707 17.85 8.39639L17.3637 8.5127ZM16.5004 9.5V9H11.5004V9.5V10H16.5004V9.5ZM11.5004 9.5L11.5006 10C12.3043 9.99969 13.0613 9.31922 12.8696 8.40696L12.3803 8.50977L11.891 8.61257C11.9126 8.71559 11.8842 8.80106 11.8215 8.86938C11.7543 8.94265 11.6411 8.99995 11.5002 9L11.5004 9.5ZM12.3803 8.50977L12.8696 8.40692C12.7084 7.6399 12.3299 6.54429 11.4162 5.79826L11.1 6.18555L10.7838 6.57284C11.4368 7.10604 11.7483 7.93366 11.891 8.61261L12.3803 8.50977ZM11.1 6.18555L11.3907 6.59238C11.8686 6.25094 12.5404 6 13.5004 6V5.5V5C12.3547 5 11.4745 5.30347 10.8093 5.77871L11.1 6.18555Z" fill="white"/>
     <path d="M4.50025 5.5L4.50027 5H4.50025V5.5ZM6.89966 6.18652L7.21601 6.57372L7.72245 6.15995L7.19037 5.77972L6.89966 6.18652ZM5.61939 8.50977L5.13008 8.40692L5.13006 8.40699L5.61939 8.50977ZM0.635988 8.5127L0.149759 8.39615L0.149693 8.39643L0.635988 8.5127ZM4.50025 5.5L4.50022 6C5.45976 6.00004 6.13074 6.25159 6.60895 6.59333L6.89966 6.18652L7.19037 5.77972C6.52556 5.30464 5.64641 5.00005 4.50027 5L4.50025 5.5ZM6.89966 6.18652L6.58331 5.79932C5.67038 6.5452 5.29133 7.63973 5.13008 8.40692L5.61939 8.50977L6.10869 8.61261C6.25128 7.93422 6.56318 7.10709 7.21601 6.57372L6.89966 6.18652ZM5.61939 8.50977L5.13006 8.40699C4.93834 9.31983 5.69678 10 6.50025 10V9.5V9C6.35923 9 6.24581 8.94269 6.17836 8.86927C6.11548 8.80082 6.08712 8.71535 6.10871 8.61254L5.61939 8.50977ZM6.50025 9.5V9H1.50025V9.5V10H6.50025V9.5ZM1.50025 9.5V9C1.35902 9 1.24744 8.94245 1.1832 8.87166C1.12432 8.80678 1.09881 8.72712 1.12228 8.62896L0.635988 8.5127L0.149693 8.39643C-0.0705652 9.31769 0.701045 10 1.50025 10V9.5ZM0.635988 8.5127L1.12222 8.62924C1.25234 8.08636 1.51157 7.42899 2.01787 6.912C2.51063 6.40883 3.27425 6 4.50025 6V5.5V5C3.02239 5 1.99583 5.50527 1.30341 6.21233C0.624511 6.90556 0.303545 7.75454 0.149759 8.39615L0.635988 8.5127Z" fill="white"/>
     <path d="M9 5.5C11.3642 5.5 12.1314 7.32511 12.3804 8.50967C12.494 9.05014 12.0523 9.5 11.5 9.5H6.5C5.94772 9.5 5.50601 9.05014 5.61961 8.50967C5.86859 7.32511 6.63581 5.5 9 5.5Z" stroke="white" stroke-linecap="round"/>
   </svg>
           `),
          bgColor: '#e9d5ff',
          route: '/products'
        },
        {
          title: 'Campaigns',
          count: 0,
          growth: 14.4,
          icon: this.sanitizer.bypassSecurityTrustHtml(`
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="10" viewBox="0 0 18 10" fill="none">
     <circle cx="9" cy="2" r="1.5" stroke="white" stroke-linecap="round"/>
     <path d="M12.701 1.25C12.8999 0.905474 13.2275 0.654076 13.6118 0.551111C13.996 0.448147 14.4055 0.50205 14.75 0.700962C15.0945 0.899874 15.3459 1.2275 15.4489 1.61177C15.5519 1.99604 15.498 2.40547 15.299 2.75C15.1001 3.09453 14.7725 3.34592 14.3882 3.44889C14.004 3.55185 13.5945 3.49795 13.25 3.29904C12.9055 3.10013 12.6541 2.7725 12.5511 2.38823C12.4481 2.00396 12.502 1.59453 12.701 1.25L12.701 1.25Z" stroke="white"/>
     <path d="M2.70096 1.25C2.89987 0.905474 3.2275 0.654076 3.61177 0.551111C3.99604 0.448147 4.40547 0.50205 4.75 0.700962C5.09453 0.899874 5.34592 1.2275 5.44889 1.61177C5.55185 1.99604 5.49795 2.40547 5.29904 2.75C5.10013 3.09453 4.7725 3.34592 4.38823 3.44889C4.00396 3.55185 3.59453 3.49795 3.25 3.29904C2.90547 3.10013 2.65408 2.7725 2.55111 2.38823C2.44815 2.00396 2.50205 1.59453 2.70096 1.25L2.70096 1.25Z" stroke="white"/>
     <path d="M13.5004 5.5L13.5004 5H13.5004V5.5ZM17.3637 8.5127L17.85 8.39639L17.8499 8.39616L17.3637 8.5127ZM16.5004 9.5L16.5004 10L16.5006 10L16.5004 9.5ZM11.5004 9.5L11.5002 9L11.5004 10V9.5ZM12.3803 8.50977L12.8696 8.40696L12.8696 8.40692L12.3803 8.50977ZM11.1 6.18555L10.8093 5.77871L10.277 6.15905L10.7838 6.57284L11.1 6.18555ZM13.5004 5.5L13.5004 6C14.7262 6.00008 15.4896 6.40891 15.9821 6.91204C16.4882 7.42899 16.7473 8.08631 16.8774 8.62923L17.3637 8.5127L17.8499 8.39616C17.6961 7.75465 17.3754 6.90571 16.6967 6.21247C16.0045 5.5054 14.9781 5.0001 13.5004 5L13.5004 5.5ZM17.3637 8.5127L16.8774 8.629C16.9009 8.72736 16.8754 8.80702 16.8167 8.87176C16.7527 8.94241 16.6413 8.99994 16.5002 9L16.5004 9.5L16.5006 10C17.3 9.99966 18.0702 9.31707 17.85 8.39639L17.3637 8.5127ZM16.5004 9.5V9H11.5004V9.5V10H16.5004V9.5ZM11.5004 9.5L11.5006 10C12.3043 9.99969 13.0613 9.31922 12.8696 8.40696L12.3803 8.50977L11.891 8.61257C11.9126 8.71559 11.8842 8.80106 11.8215 8.86938C11.7543 8.94265 11.6411 8.99995 11.5002 9L11.5004 9.5ZM12.3803 8.50977L12.8696 8.40692C12.7084 7.6399 12.3299 6.54429 11.4162 5.79826L11.1 6.18555L10.7838 6.57284C11.4368 7.10604 11.7483 7.93366 11.891 8.61261L12.3803 8.50977ZM11.1 6.18555L11.3907 6.59238C11.8686 6.25094 12.5404 6 13.5004 6V5.5V5C12.3547 5 11.4745 5.30347 10.8093 5.77871L11.1 6.18555Z" fill="white"/>
     <path d="M4.50025 5.5L4.50027 5H4.50025V5.5ZM6.89966 6.18652L7.21601 6.57372L7.72245 6.15995L7.19037 5.77972L6.89966 6.18652ZM5.61939 8.50977L5.13008 8.40692L5.13006 8.40699L5.61939 8.50977ZM0.635988 8.5127L0.149759 8.39615L0.149693 8.39643L0.635988 8.5127ZM4.50025 5.5L4.50022 6C5.45976 6.00004 6.13074 6.25159 6.60895 6.59333L6.89966 6.18652L7.19037 5.77972C6.52556 5.30464 5.64641 5.00005 4.50027 5L4.50025 5.5ZM6.89966 6.18652L6.58331 5.79932C5.67038 6.5452 5.29133 7.63973 5.13008 8.40692L5.61939 8.50977L6.10869 8.61261C6.25128 7.93422 6.56318 7.10709 7.21601 6.57372L6.89966 6.18652ZM5.61939 8.50977L5.13006 8.40699C4.93834 9.31983 5.69678 10 6.50025 10V9.5V9C6.35923 9 6.24581 8.94269 6.17836 8.86927C6.11548 8.80082 6.08712 8.71535 6.10871 8.61254L5.61939 8.50977ZM6.50025 9.5V9H1.50025V9.5V10H6.50025V9.5ZM1.50025 9.5V9C1.35902 9 1.24744 8.94245 1.1832 8.87166C1.12432 8.80678 1.09881 8.72712 1.12228 8.62896L0.635988 8.5127L0.149693 8.39643C-0.0705652 9.31769 0.701045 10 1.50025 10V9.5ZM0.635988 8.5127L1.12222 8.62924C1.25234 8.08636 1.51157 7.42899 2.01787 6.912C2.51063 6.40883 3.27425 6 4.50025 6V5.5V5C3.02239 5 1.99583 5.50527 1.30341 6.21233C0.624511 6.90556 0.303545 7.75454 0.149759 8.39615L0.635988 8.5127Z" fill="white"/>
     <path d="M9 5.5C11.3642 5.5 12.1314 7.32511 12.3804 8.50967C12.494 9.05014 12.0523 9.5 11.5 9.5H6.5C5.94772 9.5 5.50601 9.05014 5.61961 8.50967C5.86859 7.32511 6.63581 5.5 9 5.5Z" stroke="white" stroke-linecap="round"/>
   </svg>
           `),
          bgColor: '#fef9c3',
          route: '/campaign-management'
        },
  //       {
  //         title: 'Accounts Numbers Left',
  //         count: 0,
  //         growth: 14.4,
  //         icon: this.sanitizer.bypassSecurityTrustHtml(`
  //           <svg xmlns="http://www.w3.org/2000/svg" width="18" height="10" viewBox="0 0 18 10" fill="none">
  //    <circle cx="9" cy="2" r="1.5" stroke="white" stroke-linecap="round"/>
  //    <path d="M12.701 1.25C12.8999 0.905474 13.2275 0.654076 13.6118 0.551111C13.996 0.448147 14.4055 0.50205 14.75 0.700962C15.0945 0.899874 15.3459 1.2275 15.4489 1.61177C15.5519 1.99604 15.498 2.40547 15.299 2.75C15.1001 3.09453 14.7725 3.34592 14.3882 3.44889C14.004 3.55185 13.5945 3.49795 13.25 3.29904C12.9055 3.10013 12.6541 2.7725 12.5511 2.38823C12.4481 2.00396 12.502 1.59453 12.701 1.25L12.701 1.25Z" stroke="white"/>
  //    <path d="M2.70096 1.25C2.89987 0.905474 3.2275 0.654076 3.61177 0.551111C3.99604 0.448147 4.40547 0.50205 4.75 0.700962C5.09453 0.899874 5.34592 1.2275 5.44889 1.61177C5.55185 1.99604 5.49795 2.40547 5.29904 2.75C5.10013 3.09453 4.7725 3.34592 4.38823 3.44889C4.00396 3.55185 3.59453 3.49795 3.25 3.29904C2.90547 3.10013 2.65408 2.7725 2.55111 2.38823C2.44815 2.00396 2.50205 1.59453 2.70096 1.25L2.70096 1.25Z" stroke="white"/>
  //    <path d="M13.5004 5.5L13.5004 5H13.5004V5.5ZM17.3637 8.5127L17.85 8.39639L17.8499 8.39616L17.3637 8.5127ZM16.5004 9.5L16.5004 10L16.5006 10L16.5004 9.5ZM11.5004 9.5L11.5002 9L11.5004 10V9.5ZM12.3803 8.50977L12.8696 8.40696L12.8696 8.40692L12.3803 8.50977ZM11.1 6.18555L10.8093 5.77871L10.277 6.15905L10.7838 6.57284L11.1 6.18555ZM13.5004 5.5L13.5004 6C14.7262 6.00008 15.4896 6.40891 15.9821 6.91204C16.4882 7.42899 16.7473 8.08631 16.8774 8.62923L17.3637 8.5127L17.8499 8.39616C17.6961 7.75465 17.3754 6.90571 16.6967 6.21247C16.0045 5.5054 14.9781 5.0001 13.5004 5L13.5004 5.5ZM17.3637 8.5127L16.8774 8.629C16.9009 8.72736 16.8754 8.80702 16.8167 8.87176C16.7527 8.94241 16.6413 8.99994 16.5002 9L16.5004 9.5L16.5006 10C17.3 9.99966 18.0702 9.31707 17.85 8.39639L17.3637 8.5127ZM16.5004 9.5V9H11.5004V9.5V10H16.5004V9.5ZM11.5004 9.5L11.5006 10C12.3043 9.99969 13.0613 9.31922 12.8696 8.40696L12.3803 8.50977L11.891 8.61257C11.9126 8.71559 11.8842 8.80106 11.8215 8.86938C11.7543 8.94265 11.6411 8.99995 11.5002 9L11.5004 9.5ZM12.3803 8.50977L12.8696 8.40692C12.7084 7.6399 12.3299 6.54429 11.4162 5.79826L11.1 6.18555L10.7838 6.57284C11.4368 7.10604 11.7483 7.93366 11.891 8.61261L12.3803 8.50977ZM11.1 6.18555L11.3907 6.59238C11.8686 6.25094 12.5404 6 13.5004 6V5.5V5C12.3547 5 11.4745 5.30347 10.8093 5.77871L11.1 6.18555Z" fill="white"/>
  //    <path d="M4.50025 5.5L4.50027 5H4.50025V5.5ZM6.89966 6.18652L7.21601 6.57372L7.72245 6.15995L7.19037 5.77972L6.89966 6.18652ZM5.61939 8.50977L5.13008 8.40692L5.13006 8.40699L5.61939 8.50977ZM0.635988 8.5127L0.149759 8.39615L0.149693 8.39643L0.635988 8.5127ZM4.50025 5.5L4.50022 6C5.45976 6.00004 6.13074 6.25159 6.60895 6.59333L6.89966 6.18652L7.19037 5.77972C6.52556 5.30464 5.64641 5.00005 4.50027 5L4.50025 5.5ZM6.89966 6.18652L6.58331 5.79932C5.67038 6.5452 5.29133 7.63973 5.13008 8.40692L5.61939 8.50977L6.10869 8.61261C6.25128 7.93422 6.56318 7.10709 7.21601 6.57372L6.89966 6.18652ZM5.61939 8.50977L5.13006 8.40699C4.93834 9.31983 5.69678 10 6.50025 10V9.5V9C6.35923 9 6.24581 8.94269 6.17836 8.86927C6.11548 8.80082 6.08712 8.71535 6.10871 8.61254L5.61939 8.50977ZM6.50025 9.5V9H1.50025V9.5V10H6.50025V9.5ZM1.50025 9.5V9C1.35902 9 1.24744 8.94245 1.1832 8.87166C1.12432 8.80678 1.09881 8.72712 1.12228 8.62896L0.635988 8.5127L0.149693 8.39643C-0.0705652 9.31769 0.701045 10 1.50025 10V9.5ZM0.635988 8.5127L1.12222 8.62924C1.25234 8.08636 1.51157 7.42899 2.01787 6.912C2.51063 6.40883 3.27425 6 4.50025 6V5.5V5C3.02239 5 1.99583 5.50527 1.30341 6.21233C0.624511 6.90556 0.303545 7.75454 0.149759 8.39615L0.635988 8.5127Z" fill="white"/>
  //    <path d="M9 5.5C11.3642 5.5 12.1314 7.32511 12.3804 8.50967C12.494 9.05014 12.0523 9.5 11.5 9.5H6.5C5.94772 9.5 5.50601 9.05014 5.61961 8.50967C5.86859 7.32511 6.63581 5.5 9 5.5Z" stroke="white" stroke-linecap="round"/>
  //  </svg>
  //          `),
  //         bgColor: '#fbcfe8',
  //         route: '/campaign-management'
  //       },
      ];
    } catch (error) {
      console.error('Error initializing overview cards:', error);
    }
  }
  seghandleClick(data: any): void {
    try {
      if (data === 'platform-statistics') { this.getDashboardplatformstatistics() }
      else { this.onSearch() }
      this.currentTab = data;
      console.log('Current tab:', this.currentTab);
    } catch (error) {
      console.error('Error handling segment click:', error);
    }
  }

  ngAfterViewInit(): void {
    try {
      if (isPlatformBrowser(this.platformId)) {
        this.chartCanvases.forEach((canvasRef, ind) => {
          const ctx = canvasRef.nativeElement.getContext('2d');
          if (ctx) {
            this.createChart(ctx, ind);
          }
        });
      }
    } catch (error) {
      console.error('Error in AfterViewInit:', error);
    }
  }

  createChart(ctx: CanvasRenderingContext2D, ind: number): void {
    try {
      const config: ChartConfiguration<'doughnut'> = {
        type: 'doughnut',
        data: {
          labels: [
            'New',
            'Existing',
            'Unfinished',
            'Failedsm',
            'Multiple Customer'
          ],
          datasets: [
            {
              data: [20, 20, 20, 20, 20],
              backgroundColor: ['#1D3BFF', '#A020F0', '#E6C9F1', '#CFE2FF', '#0c49a4ff'],
              borderWidth: 0,
              borderRadius: 10,
              spacing: 4,
            },
          ],
        },
        options: {
          responsive: true,
          cutout: '60%',
          plugins: {
            legend: {
              display: false,
            },
            tooltip: {
              callbacks: {
                label: (context) => `${context.label}: ${context.parsed}`,
              },
            },
            datalabels: {
              color: '#fff',
              font: {
                weight: 'bold',
                size: 14,
              },
              formatter: (value, context) => {
                const data = context.chart.data.datasets[0].data as number[];
                const total = data.reduce((a, b) => a + b, 0);
                if (total === 0) {
                  return ""
                }
                const percentage = ((value / total) * 100).toFixed(0);
                return `${percentage}%`;
              },
            },
          },
        },
        plugins: [
          ChartDataLabels,
          {
            id: 'centerText',
            beforeDraw(chart) {
              const { width, height } = chart;
              const ctx = chart.ctx;
              ctx.restore();
              ctx.textBaseline = 'middle';
              const text = '1.05';
              const subText = 'Average range';
              const textX = Math.round(
                (width - ctx.measureText(text).width) / 2
              );
              const textY = height / 2.1;
              ctx.fillStyle = '#1d1d1d';
              ctx.fillText(text, textX, textY);
              const subTextX = Math.round(
                (width - ctx.measureText(subText).width) / 2
              );
              const subTextY = height / 1.8;
              ctx.fillStyle = '#888';
              ctx.fillText(subText, subTextX, subTextY);
              ctx.save();
            },
          },
        ],
      };
      this.charts[ind] = new Chart(ctx, config);
    } catch (error) {
      console.error('Error creating chart:', error);
    }
  }

  updateAllCharts(newData: number[], ind: number, indicesToUpdate: number[], checkZero: boolean[]): void {
    const originalLabels = ['New', 'Existing', 'Unfinished Customer', 'Failed Smartsearch', 'Customer with Multiple Application', 'Online Customer',
      'App Customer', 'App & Online Customer', 'Passbook', 'NCAO',
      'total_reg_and_ncao_count', 'both_app_online', 'Total Number of Active Customers'];
    const originalColors = ['#2f3cfe', '#e6caff', '#9a27ec', '#6b99f0ff', '#ca3a27ff', '#a8a113ff',
      '#0da92cff', '#a488bcff', '#bb1b68ff', '#686a6cff', '#1bb4e7ff', '#8d0f99ff',
      '#066c30ff'];

    const filteredData: number[] = [];
    const filteredLabels: string[] = [];
    const filteredColors: string[] = [];
    newData.forEach((val, index) => {
      if (val !== 0 && indicesToUpdate.includes(index)) {
        filteredData.push(val);
        filteredLabels.push(originalLabels[index]);
        filteredColors.push(originalColors[index]);
      }
    });

    let isZero = true;
    filteredData.forEach((val) => {
      if (val !== 0) {
        isZero = false;
      }
    });

    if (isZero) {
      checkZero[ind] = true;
    }
    this.charts.forEach((chart, index) => {
      if (index == ind) {
        chart.data.labels = filteredLabels;
        chart.data.datasets[0].data = filteredData;
        chart.data.datasets[0].backgroundColor = filteredColors;
        chart.update();
      }
    });
  }

  updateAllChartsPS(newData: number[], newLabels: string[], ind: number, indicesToUpdate: number[], checkZero: boolean[]): void {
    const originalColors = ['#2f3cfe', '#e6caff', '#9a27ec', '#6b99f0ff', '#ca3a27ff', '#a8a113ff',
      '#0da92cff', '#a488bcff', '#bb1b68ff', '#686a6cff', '#1bb4e7ff', '#8d0f99ff',
      '#066c30ff', '#28c368ff', '#6c6006ff', '#0b066cff'];
    const filteredData: number[] = [];
    const filteredLabels: string[] = [];
    const filteredColors: string[] = [];
    let id = 0
    for (let i = 0; i < newData.length; i++) {
      if (indicesToUpdate.includes(i)) {
        filteredData.push(newData[i]);
        filteredLabels.push(newLabels[id]);
        filteredColors.push(originalColors[i]);
        id++;
      }
    }

    let isZero = true;
    filteredData.forEach((val) => {
      if (val !== 0) {
        isZero = false;
      }
    });
    if (isZero) {
      checkZero[ind] = true;
    }
    this.charts.forEach((chart, index) => {
      if (index == ind) {
        chart.data.labels = filteredLabels;
        chart.data.datasets[0].data = filteredData;
        chart.data.datasets[0].backgroundColor = filteredColors;
        chart.update();
      }
    });
  }

  updateStats(newData: number[], ind: number, indicesToUpdate: number[]): void {
    for (let i = 0; i < this.statsPerChart[ind].length; i++) {
      this.statsPerChart[ind][i].count = newData[indicesToUpdate[i]];
    }
  }

  updateStatsPS(newData: number[], newLabels: string[], ind: number, indicesToUpdate: number[]): void {
    const originalColors = ['#2f3cfe', '#e6caff', '#9a27ec', '#6b99f0ff', '#ca3a27ff', '#a8a113ff',
      '#0da92cff', '#a488bcff', '#bb1b68ff', '#686a6cff', '#1bb4e7ff', '#8d0f99ff',
      '#066c30ff', '#28c368ff', '#6c6006ff', '#0b066cff'];
    let temp = [];
    let id = 0
    for (let i = 0; i < newData.length; i++) {
      if (indicesToUpdate.includes(i)) {
        let obj = { label: 'online_customers', count: 11, color: '#a8a113ff' };
        obj.label = newLabels[id];
        obj.count = newData[i];
        obj.color = originalColors[i];
        temp.push(obj);
        id++;
      }
    }
    this.statsPerChartPS.push(temp);
  }

  onSearch(): void {
    try {
      const now = new Date();
      const formattedFromDate = this.fromDate ? `${this.fromDate} 00:00:00` : `${now} 00:00:00`;
      const formattedToDate = this.toDate ? `${this.toDate} ${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}` : `${now} ${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`;
      const searchData = {
        fromdate: formattedFromDate,
        todate: formattedToDate,
        users_id: this.gps.usersID
      };
      this.hasZero = [false, false, false];

      this.apiGatewayService.post(globals.dashboardDateSearchDetailApiEndPoint, searchData).subscribe({
        next: (res) => {
          try {
            let temp: any = [];
            for (const key in res.data) {
              temp.push(Object.values(res.data[key][0])[0]);
            }
            let checkZero = [false, false, false];
            this.updateAllCharts(temp, 0, [12, 8, 9], checkZero);
            this.updateStats(temp, 0, [12, 8, 9]);
            this.updateAllCharts(temp, 1, [7, 6, 5], checkZero);
            this.updateStats(temp, 1, [7, 6, 5]);
            this.updateAllCharts(temp, 2, [2, 3, 4], checkZero);
            this.updateStats(temp, 2, [2, 3, 4]);
            this.cd.detectChanges();
            this.hasZero = checkZero;
            console.log("(DR)", this.hasZero);
          } catch (error) {
            console.error('Error processing dashboard response:', error);
          }
        },
        error: (err) => {
          console.error('Dashboard search failed:', err);
        }
      });
    } catch (error) {
      console.error('Error in search: ', error);
    }
  }

  getDashboardDetails(): void {
    try {
      this.apiGatewayService.post(globals.dashboardDetailApiEndPoint, { 'users_id': this.gps.usersID }).subscribe({
        next: (res) => {
          try {
            console.log(res);
            this.updateOverviewCards(res);
          } catch (error) {
            console.error('Error processing dashboard response:', error);
          }
        },
        error: (err) => {
          console.error('Dashboard failed:', err);
        }
      });
    } catch (error) {
      console.error('Error fetching dashboard details:', error);
    }
  }

  updateOverviewCards(apiResponse: any): void {
    try {
      if (!apiResponse.data || !apiResponse.status) return;
      this.overviewCards = [
        { ...this.overviewCards[0], count: apiResponse.data.totalcustomercount || 0 },
        { ...this.overviewCards[1], count: apiResponse.data.appcustomer || 0 },
        { ...this.overviewCards[2], count: apiResponse.data.onlinecustomer || 0  },
        { ...this.overviewCards[3], count: apiResponse.data.bothapponlinecustomer || 0 },
        { ...this.overviewCards[4], count: apiResponse.data.usercount || 0 },
        { ...this.overviewCards[5], count: apiResponse.data.productcount || 0 },
        { ...this.overviewCards[6], count: apiResponse.data.campaigncount || 0 },
        // { ...this.overviewCards[7], count: apiResponse.data.accountscount || 0 }
      ];
    } catch (error) {
      console.error('Error updatinng overview cards :', error);
    }
  }

  getDashboardplatformstatistics(): void {
    try {
      this.hasZero = [false, false, false];
      this.apiGatewayService.post(globals.dashboardgetplatformstatistics, { 'users_id': this.gps.usersID }).subscribe({
        next: (res) => {
          try {
            this.statsPerChartPS = [];
            let all_keys = Object.keys(res.data);
            let checkZero = [false, false, false];

            let idxs: any[] = [[12, 1, 0, 11], [5, 4, 3], [13, 14, 15]]
            let names: any[] = [
              ["Previous 7 Days", "Previous 1 Month", "Previous 1 year", "Total Active"],
              ["Previous 1 Month", "Previous 3 Months", "Previous 1 Year"],
              ["Delivered", "Viewed", "Interested"]
            ]
            let values: any[] = [];
            for (let i = 0; i < 13; i++)
              values.push(res.data[all_keys[i]].count);

            values.push(res.data["pushMessageCustomer"].delivered);
            values.push(res.data["pushMessageCustomer"].viewed);
            values.push(res.data["pushMessageCustomer"].interested);

            this.updateAllChartsPS(values, names[0], 0, idxs[0], checkZero);
            this.updateStatsPS(values, names[0], 0, idxs[0]);
            this.updateAllChartsPS(values, names[1], 1, idxs[1], checkZero);
            this.updateStatsPS(values, names[1], 1, idxs[1]);
            this.updateAllChartsPS(values, names[2], 2, idxs[2], checkZero);
            this.updateStatsPS(values, names[2], 2, idxs[2]);
            this.hasZero = checkZero;
            console.log("(PS)", this.hasZero);

          } catch (error) {
            console.error('Error processing dashboard platformstatistics response:', error);
          }
        },
        error: (err) => {
          console.error('Dashboard platformstatistics failed:', err);
        }
      });
    } catch (error) {
      console.error('Error fetching dashboard platformstatistics details:', error);
    }
  }

toggleChart(ind: number): void {
  this.showtable[ind] = !this.showtable[ind];
  console.log(this.showtable[ind]);

}

}
